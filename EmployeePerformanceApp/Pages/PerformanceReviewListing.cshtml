@page
@model EmployeePerformanceApp.Pages.PerformanceReviewListingModel
@{
    ViewData["Title"] = "Performance Reviews";
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@1.3.2/dist/chartjs-adapter-moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.0"></script>
@using System.Text.Json 
@using Newtonsoft.Json

<h1>@ViewData["Title"]</h1>


@if (Model.Admin)
{
    <form method="post">
        <button type="submit" asp-page-handler="GoBackToMenu" class="btn btn-primary"> <h4>Go Back</h4></button>
    </form>
}

@if (Model.Admin && Model.CreatingNewReport == false && Model.UpdatePerformanceReview == false)
{ 
    <form method="post" asp-page-handler="Search">
        <div class="form-group">
            <label for="searchTerm">Search Name or Position</label>
            <input type="text" class="form-control" id="searchTerm" name="SearchTerm" value="@Model.SearchTerm" />
        </div>
        <button type="submit" class="btn btn-primary">Search</button>
    </form>    
}

@if (Model.ErrorMessage != null)
{
    <div class="alert alert-danger">@Model.ErrorMessage</div>
}

@if (Model.SuccessMessage != null)
{
    <div class="alert alert-success">@Model.SuccessMessage</div>
}

@if (Model.Employees != null && Model.Employees.Any() && Model.CreatingNewReport == false && Model.UpdatePerformanceReview == false)
{ 
    <h2>Search Results</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Position</th>
                <th>Select</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in Model.Employees)
            {
                <tr>
                    <td>@employee.first_name</td>
                    <td>@employee.last_name</td>
                    <td>@employee.position</td>
                    <td>
                        <form method="post" asp-page-handler="Select">
                            <input type="hidden" name="employeeId" value="@employee.employee_id" />
                            <button type="submit" class="btn btn-secondary">Select</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (Model.Admin && Model.EmployeeFound)
{
    if (Model.CreatingNewReport == false && Model.UpdatePerformanceReview == false)
    {
        <form method="post" asp-page-handler="OpenNewReport">
            <input type="hidden" name="EmployeeId" value="@Model.EmployeeId" />
            <input type="hidden" name="userName" value="@Model.UserName" />
            <button type="submit" class="btn btn-primary">Create New Report</button>
        </form>
    }
    else
    {
        <form method="post" asp-page-handler="CancelNewReport">
            <input type="hidden" name="EmployeeId" value="@Model.EmployeeId" />
            <input type="hidden" name="userName" value="@Model.UserName" />
            <button type="submit" class="btn btn-primary">Close Report</button>
        </form>

        <form method="post" asp-page-handler="Complete">
            <input type="hidden" name="employeeId" value="@Model.EmployeeId" />
            <input type="hidden" name="userName" value="@Model.UserName" />
            <input type="hidden" name="reviewID" value="@Model.ReviewID" />
            <input type="hidden" name="updatingPerforance" value="@(Model.UpdatePerformanceReview ? 1 : 0)" />

            @{
                if (Model.UpdatePerformanceReview)
                {
                    <h2>Update Performance Review for @Model.FormattedUserName</h2>
                }
                else
                {
                    <h2>Create new Performance Review for @Model.FormattedUserName</h2>
                }
            }

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Review Date</th>
                        <th>Score</th>
                        <th>Comments</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <label for="performanceReviewDate">Performance Review Date</label>
                            <input type="date" class="form-control" id="performanceReviewDate" name="PerformanceReviewDate" value="@Model.PerformanceReviewDate.ToString("yyyy-MM-dd")" />
                        </td>
                        <td>
                            <label for="performanceRating">Performance Rating</label>
                            <input type="number" class="form-control" id="performanceRating" name="PerformanceRating" value="@Model.PerformanceRating" />
                        </td>
                        <td>
                            <label for="performanceComments">Performance Comments</label>
                            <input type="text" class="form-control" id="performanceComments" name="PerformanceComments" value="@Model.PerformanceComments" />
                        </td>
                    </tr>
                </tbody>
            </table>

            <button type="submit" class="btn btn-primary">Complete Report</button>
        </form>
    }
}


@if (Model.PerformanceReviews != null && Model.PerformanceReviews.Any() && Model.CreatingNewReport == false && Model.UpdatePerformanceReview == false)
{ 
    <h2>Performance Review Dates for @Model.FormattedUserName</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Review Date</th>
                <th>Score</th>
                <th>Comments</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var review in Model.PerformanceReviews)
            {
                <tr>
                    <td>@review.review_date.ToShortDateString()</td>
                    <td>@review.score</td>
                    <td>@review.comments</td>
                    @if (Model.Admin){
                        <td>
                            <form method="post" asp-page-handler="SelectPerformanceReport">
                                <input type="hidden" name="employeeId" value="@Model.EmployeeId" />
                                <input type="hidden" name="performanceReviewID" value="@review.review_id" />
                                <input type="hidden" name="userName" value="@Model.UserName" />
                                    <button type="submit" class="btn btn-secondary">Select</button>
                            </form>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
        
    <canvas id="performanceChart" width="600" height="150"></canvas>

    <script>
        var EmployeeData = @Html.Raw(JsonConvert.SerializeObject(Model.PerformanceReviews));
         
        var EmployeeName = @Html.Raw(JsonConvert.SerializeObject(Model.FormattedUserName));   
                
        var average = 0;

        for (let i = 0; i < EmployeeData.length; i++) {
            average += EmployeeData[i].score;
        }

        average = average / EmployeeData.length;

        EmployeeData.reverse();

        var ctx = document.getElementById('performanceChart').getContext('2d');
        var employeeChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: EmployeeData.map(function (review) {
                    return moment(review.review_date).format('MMM DD, YYYY');
                }),
                datasets: [{
                    label: EmployeeName,
                    data: EmployeeData.map(function (review) {
                        return {
                            x: moment(review.review_date).toDate(),
                            y: review.score
                        };
                    }),
                    backgroundColor: 'rgba(75, 192, 192, 0.9)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: false
                    }
                },
                plugins: {
                    annotation: {
                        annotations: { 
                            line1: {
                                type: 'line',
                                yMin: average,
                                yMax: average,
                                borderColor: 'black',
                                borderWidth: 2,
                                label: {
                                    enabled: true,
                                    content: 'Average at ' + Math.round(average),
                                    position: 'end',
                                    backgroundColor: 'rgba(0,0,0,0.8)',
                                    color: 'white',
                                    font: {
                                        style: 'bold'
                                    }
                                }
                            }
                        }
                    }
                }
            }
        });
    </script>
}

